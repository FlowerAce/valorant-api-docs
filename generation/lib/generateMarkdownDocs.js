import {promises as fs} from 'node:fs'
import path from 'node:path'
import rimraf from 'rimraf'

const fileHeader = '<!--\n\nThis file is automatically generated!\nDo not edit it directly!\nSee https://github.com/techchrism/valorant-api-docs/blob/trunk/contributing.md for more information.\n\n-->\n\n';

export async function generateMarkdownDocs(docsDir, dataManager)
{
    // Remove docs dir if it exists and recreate it
    try
    {
        await rimraf(docsDir);
        await fs.mkdir(docsDir);
    } catch(ignored) {}

    // Create folders
    for(const folder of dataManager.folders)
    {
        const folderParts = folder.split('/')
        const folderPath = path.join(docsDir, ...folderParts);
        await fs.mkdir(folderPath, {recursive: true});

        let readmeText = `# ${folderParts[folderParts.length - 1]}\n\n`;
        const endpointsForFolder = dataManager.endpoints.filter(endpoint => endpoint.folder === folder);
        if(endpointsForFolder.length !== 0)
        {
            readmeText += '### Endpoints:\n' +
                '|Name|Description|\n' +
                '|---|---|\n';
            for(const endpoint of endpointsForFolder)
            {
                readmeText += `|[${endpoint.name}](${endpoint.method}%20${endpoint.name.replaceAll(' ', '%20')}.md)|${endpoint.description?.split('\n')?.[0]}|\n`;
            }
            readmeText += '\n';
        }
        await fs.writeFile(path.join(folderPath, 'readme.md'), fileHeader + readmeText, 'utf-8');
    }

    // Write endpoints
    for(const endpoint of dataManager.endpoints)
    {
        const endpointFile = path.join(docsDir, ...(endpoint.folder || '').split('/'), `${endpoint.method} ${endpoint.name}.md`);
        await fs.writeFile(endpointFile, fileHeader + dataManager.renderEndpoint(endpoint, 'github'), 'utf-8');
    }

    // Write docs
    for(const docName in dataManager.docs)
    {
        const docFile = path.join(docsDir, docName + '.md');
        await fs.writeFile(docFile, fileHeader + dataManager.renderDoc(docName, 'github'), 'utf-8');
    }
}
